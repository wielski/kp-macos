//
// KinopubAuthDefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class KinopubAuthDefaultAPI {

    /**

     - parameter getAccessToken: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAccessToken(getAccessToken: GetAccessToken? = nil, apiResponseQueue: DispatchQueue = KinopubAuthAPI.apiResponseQueue, completion: @escaping ((_ data: AuthAccessToken?, _ error: Error?) -> Void)) -> RequestTask {
        return getAccessTokenWithRequestBuilder(getAccessToken: getAccessToken).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /device?
     - OAuth Device Authentication Flow
     - parameter getAccessToken: (body)  (optional)
     - returns: RequestBuilder<AuthAccessToken> 
     */
    open class func getAccessTokenWithRequestBuilder(getAccessToken: GetAccessToken? = nil) -> RequestBuilder<AuthAccessToken> {
        let localVariablePath = "/device?"
        let localVariableURLString = KinopubAuthAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getAccessToken)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthAccessToken>.Type = KinopubAuthAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter getDeviceCode: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getDeviceCode(getDeviceCode: GetDeviceCode? = nil, apiResponseQueue: DispatchQueue = KinopubAuthAPI.apiResponseQueue, completion: @escaping ((_ data: AuthDeviceCode?, _ error: Error?) -> Void)) -> RequestTask {
        return getDeviceCodeWithRequestBuilder(getDeviceCode: getDeviceCode).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /device
     - OAuth Device Authentication Flow
     - parameter getDeviceCode: (body)  (optional)
     - returns: RequestBuilder<AuthDeviceCode> 
     */
    open class func getDeviceCodeWithRequestBuilder(getDeviceCode: GetDeviceCode? = nil) -> RequestBuilder<AuthDeviceCode> {
        let localVariablePath = "/device"
        let localVariableURLString = KinopubAuthAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getDeviceCode)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthDeviceCode>.Type = KinopubAuthAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter refreshAccessToken: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func refreshAccessToken(refreshAccessToken: RefreshAccessToken? = nil, apiResponseQueue: DispatchQueue = KinopubAuthAPI.apiResponseQueue, completion: @escaping ((_ data: AuthAccessToken?, _ error: Error?) -> Void)) -> RequestTask {
        return refreshAccessTokenWithRequestBuilder(refreshAccessToken: refreshAccessToken).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /device??
     - OAuth Device Authentication Flow
     - parameter refreshAccessToken: (body)  (optional)
     - returns: RequestBuilder<AuthAccessToken> 
     */
    open class func refreshAccessTokenWithRequestBuilder(refreshAccessToken: RefreshAccessToken? = nil) -> RequestBuilder<AuthAccessToken> {
        let localVariablePath = "/device??"
        let localVariableURLString = KinopubAuthAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: refreshAccessToken)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthAccessToken>.Type = KinopubAuthAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
