//
// KinopubDefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class KinopubDefaultAPI {

    /**

     - parameter addItemToBookmarkFolderRequest: (body) Object with item id and folder id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addItemToBookmarkFolder(addItemToBookmarkFolderRequest: AddItemToBookmarkFolderRequest, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: UnlinkCurrentDevice200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return addItemToBookmarkFolderWithRequestBuilder(addItemToBookmarkFolderRequest: addItemToBookmarkFolderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /bookmarks/add
     - Add item to bookmark folder
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter addItemToBookmarkFolderRequest: (body) Object with item id and folder id 
     - returns: RequestBuilder<UnlinkCurrentDevice200Response> 
     */
    open class func addItemToBookmarkFolderWithRequestBuilder(addItemToBookmarkFolderRequest: AddItemToBookmarkFolderRequest) -> RequestBuilder<UnlinkCurrentDevice200Response> {
        let localVariablePath = "/bookmarks/add"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addItemToBookmarkFolderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnlinkCurrentDevice200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (query) Item id 
     - parameter video: (query) Video id 
     - parameter time: (query) Time in seconds 
     - parameter season: (query) Seson number (only for series) 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addTimeMark(id: Int64, video: Int64, time: Int64, season: Int, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: UnlinkCurrentDevice200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return addTimeMarkWithRequestBuilder(id: id, video: video, time: time, season: season).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /watching/marktime
     - Mark watching time
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter id: (query) Item id 
     - parameter video: (query) Video id 
     - parameter time: (query) Time in seconds 
     - parameter season: (query) Seson number (only for series) 
     - returns: RequestBuilder<UnlinkCurrentDevice200Response> 
     */
    open class func addTimeMarkWithRequestBuilder(id: Int64, video: Int64, time: Int64, season: Int) -> RequestBuilder<UnlinkCurrentDevice200Response> {
        let localVariablePath = "/watching/marktime"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(), isExplode: true),
            "video": (wrappedValue: video.encodeToJSON(), isExplode: true),
            "time": (wrappedValue: time.encodeToJSON(), isExplode: true),
            "season": (wrappedValue: season.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnlinkCurrentDevice200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter clearHistoryForMediaRequest: (body) Object with item id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func clearHistoryForItem(clearHistoryForMediaRequest: ClearHistoryForMediaRequest, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: UnlinkCurrentDevice200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return clearHistoryForItemWithRequestBuilder(clearHistoryForMediaRequest: clearHistoryForMediaRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /history/clear-for-item
     - Clear history by item id
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter clearHistoryForMediaRequest: (body) Object with item id 
     - returns: RequestBuilder<UnlinkCurrentDevice200Response> 
     */
    open class func clearHistoryForItemWithRequestBuilder(clearHistoryForMediaRequest: ClearHistoryForMediaRequest) -> RequestBuilder<UnlinkCurrentDevice200Response> {
        let localVariablePath = "/history/clear-for-item"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: clearHistoryForMediaRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnlinkCurrentDevice200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter clearHistoryForMediaRequest: (body) Object with media id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func clearHistoryForMedia(clearHistoryForMediaRequest: ClearHistoryForMediaRequest, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: UnlinkCurrentDevice200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return clearHistoryForMediaWithRequestBuilder(clearHistoryForMediaRequest: clearHistoryForMediaRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /history/clear-for-media
     - Clear history by media id
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter clearHistoryForMediaRequest: (body) Object with media id 
     - returns: RequestBuilder<UnlinkCurrentDevice200Response> 
     */
    open class func clearHistoryForMediaWithRequestBuilder(clearHistoryForMediaRequest: ClearHistoryForMediaRequest) -> RequestBuilder<UnlinkCurrentDevice200Response> {
        let localVariablePath = "/history/clear-for-media"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: clearHistoryForMediaRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnlinkCurrentDevice200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter clearHistoryForMediaRequest: (body) Object with season id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func clearHistoryForSeason(clearHistoryForMediaRequest: ClearHistoryForMediaRequest, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: UnlinkCurrentDevice200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return clearHistoryForSeasonWithRequestBuilder(clearHistoryForMediaRequest: clearHistoryForMediaRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /history/clear-for-season
     - Clear history by season id
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter clearHistoryForMediaRequest: (body) Object with season id 
     - returns: RequestBuilder<UnlinkCurrentDevice200Response> 
     */
    open class func clearHistoryForSeasonWithRequestBuilder(clearHistoryForMediaRequest: ClearHistoryForMediaRequest) -> RequestBuilder<UnlinkCurrentDevice200Response> {
        let localVariablePath = "/history/clear-for-season"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: clearHistoryForMediaRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnlinkCurrentDevice200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter createBookmarkFolderRequest: (body) Object with title 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createBookmarkFolder(createBookmarkFolderRequest: CreateBookmarkFolderRequest, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: CreateBookmarkFolder200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return createBookmarkFolderWithRequestBuilder(createBookmarkFolderRequest: createBookmarkFolderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /bookmarks/create
     - Create bookmark folder
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter createBookmarkFolderRequest: (body) Object with title 
     - returns: RequestBuilder<CreateBookmarkFolder200Response> 
     */
    open class func createBookmarkFolderWithRequestBuilder(createBookmarkFolderRequest: CreateBookmarkFolderRequest) -> RequestBuilder<CreateBookmarkFolder200Response> {
        let localVariablePath = "/bookmarks/create"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createBookmarkFolderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateBookmarkFolder200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getBookmarkFolders(apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetBookmarkFolders200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getBookmarkFoldersWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /bookmarks
     - Get bookmark folders
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - returns: RequestBuilder<GetBookmarkFolders200Response> 
     */
    open class func getBookmarkFoldersWithRequestBuilder() -> RequestBuilder<GetBookmarkFolders200Response> {
        let localVariablePath = "/bookmarks"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetBookmarkFolders200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter item: (query) Item id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getBookmarkFoldersByItem(item: Int64? = nil, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetBookmarkFoldersByItem200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getBookmarkFoldersByItemWithRequestBuilder(item: item).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /bookmarks/get-item-folders
     - Get bookmark folders list by item id
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter item: (query) Item id (optional)
     - returns: RequestBuilder<GetBookmarkFoldersByItem200Response> 
     */
    open class func getBookmarkFoldersByItemWithRequestBuilder(item: Int64? = nil) -> RequestBuilder<GetBookmarkFoldersByItem200Response> {
        let localVariablePath = "/bookmarks/get-item-folders"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "item": (wrappedValue: item?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetBookmarkFoldersByItem200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) Id of bookmark 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getBookmarkItems(id: Int64, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetBookmarkItems200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getBookmarkItemsWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /bookmarks/{id}
     - Get bookmark folder items
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter id: (path) Id of bookmark 
     - returns: RequestBuilder<GetBookmarkItems200Response> 
     */
    open class func getBookmarkItemsWithRequestBuilder(id: Int64) -> RequestBuilder<GetBookmarkItems200Response> {
        var localVariablePath = "/bookmarks/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetBookmarkItems200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (query) Collection id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCollection(id: Int64? = nil, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetCollection200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getCollectionWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /collections/view
     - Get collection
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter id: (query) Collection id (optional)
     - returns: RequestBuilder<GetCollection200Response> 
     */
    open class func getCollectionWithRequestBuilder(id: Int64? = nil) -> RequestBuilder<GetCollection200Response> {
        let localVariablePath = "/collections/view"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetCollection200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter title: (query) Title for search 
     - parameter sort: (query) Sort by field. Char &#39;-&#39; at the end is DESC (optional)
     - parameter perpage: (query) Results on one page (optional)
     - parameter page: (query) Page number (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCollectionList(title: String, sort: GetCollectionListSortParameter? = nil, perpage: Int64? = nil, page: Int64? = nil, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetCollectionList200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getCollectionListWithRequestBuilder(title: title, sort: sort, perpage: perpage, page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /collections
     - Get collections list
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter title: (query) Title for search 
     - parameter sort: (query) Sort by field. Char &#39;-&#39; at the end is DESC (optional)
     - parameter perpage: (query) Results on one page (optional)
     - parameter page: (query) Page number (optional)
     - returns: RequestBuilder<GetCollectionList200Response> 
     */
    open class func getCollectionListWithRequestBuilder(title: String, sort: GetCollectionListSortParameter? = nil, perpage: Int64? = nil, page: Int64? = nil) -> RequestBuilder<GetCollectionList200Response> {
        let localVariablePath = "/collections"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "title": (wrappedValue: title.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "perpage": (wrappedValue: perpage?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetCollectionList200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getContentTypes(apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: [ContentType]?, _ error: Error?) -> Void)) -> RequestTask {
        return getContentTypesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /types
     - Returns content types
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - returns: RequestBuilder<[ContentType]> 
     */
    open class func getContentTypesWithRequestBuilder() -> RequestBuilder<[ContentType]> {
        let localVariablePath = "/types"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ContentType]>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCountries(apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: [Country]?, _ error: Error?) -> Void)) -> RequestTask {
        return getCountriesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /countries
     - Returns countries
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - returns: RequestBuilder<[Country]> 
     */
    open class func getCountriesWithRequestBuilder() -> RequestBuilder<[Country]> {
        let localVariablePath = "/countries"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Country]>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCurrentDevice(apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetDeviceById200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getCurrentDeviceWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /device/current
     - Returns current device
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - returns: RequestBuilder<GetDeviceById200Response> 
     */
    open class func getCurrentDeviceWithRequestBuilder() -> RequestBuilder<GetDeviceById200Response> {
        let localVariablePath = "/device/current"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetDeviceById200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCurrentUser(apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetCurrentUser200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getCurrentUserWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /user
     - Returns current user information
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - returns: RequestBuilder<GetCurrentUser200Response> 
     */
    open class func getCurrentUserWithRequestBuilder() -> RequestBuilder<GetCurrentUser200Response> {
        let localVariablePath = "/user"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetCurrentUser200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) id of device 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getDeviceById(id: Int64, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetDeviceById200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getDeviceByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /device/{id}
     - Returns device by id
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter id: (path) id of device 
     - returns: RequestBuilder<GetDeviceById200Response> 
     */
    open class func getDeviceByIdWithRequestBuilder(id: Int64) -> RequestBuilder<GetDeviceById200Response> {
        var localVariablePath = "/device/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetDeviceById200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) id of device 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getDeviceSettings(id: Int64, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetDeviceSettings200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getDeviceSettingsWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /device/{id}/settings
     - Returns device settings
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter id: (path) id of device 
     - returns: RequestBuilder<GetDeviceSettings200Response> 
     */
    open class func getDeviceSettingsWithRequestBuilder(id: Int64) -> RequestBuilder<GetDeviceSettings200Response> {
        var localVariablePath = "/device/{id}/settings"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetDeviceSettings200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getDevicesList(apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetDevicesList200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getDevicesListWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /device
     - Returns devices list
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - returns: RequestBuilder<GetDevicesList200Response> 
     */
    open class func getDevicesListWithRequestBuilder() -> RequestBuilder<GetDevicesList200Response> {
        let localVariablePath = "/device"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetDevicesList200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter type: (query) Video content types (optional)
     - parameter perpage: (query) Results on one page (optional)
     - parameter page: (query) Page number (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getFreshItems(type: [String]? = nil, perpage: Int64? = nil, page: Int64? = nil, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetItemsByFilter200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getFreshItemsWithRequestBuilder(type: type, perpage: perpage, page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /items/fresh
     - Fresh items shortcut
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter type: (query) Video content types (optional)
     - parameter perpage: (query) Results on one page (optional)
     - parameter page: (query) Page number (optional)
     - returns: RequestBuilder<GetItemsByFilter200Response> 
     */
    open class func getFreshItemsWithRequestBuilder(type: [String]? = nil, perpage: Int64? = nil, page: Int64? = nil) -> RequestBuilder<GetItemsByFilter200Response> {
        let localVariablePath = "/items/fresh"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "perpage": (wrappedValue: perpage?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetItemsByFilter200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getGenres(apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: [Genre]?, _ error: Error?) -> Void)) -> RequestTask {
        return getGenresWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /genres
     - Returns genres
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - returns: RequestBuilder<[Genre]> 
     */
    open class func getGenresWithRequestBuilder() -> RequestBuilder<[Genre]> {
        let localVariablePath = "/genres"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Genre]>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter perpage: (query) Results on one page (optional)
     - parameter page: (query) Page number (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getHistory(perpage: Int64? = nil, page: Int64? = nil, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetHistory200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getHistoryWithRequestBuilder(perpage: perpage, page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /history
     - Returns history of views
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter perpage: (query) Results on one page (optional)
     - parameter page: (query) Page number (optional)
     - returns: RequestBuilder<GetHistory200Response> 
     */
    open class func getHistoryWithRequestBuilder(perpage: Int64? = nil, page: Int64? = nil) -> RequestBuilder<GetHistory200Response> {
        let localVariablePath = "/history"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "perpage": (wrappedValue: perpage?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetHistory200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter type: (query) Video content types (optional)
     - parameter perpage: (query) Results on one page (optional)
     - parameter page: (query) Page number (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getHotItems(type: [String]? = nil, perpage: Int64? = nil, page: Int64? = nil, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetItemsByFilter200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getHotItemsWithRequestBuilder(type: type, perpage: perpage, page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /items/hot
     - Hot items shortcut
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter type: (query) Video content types (optional)
     - parameter perpage: (query) Results on one page (optional)
     - parameter page: (query) Page number (optional)
     - returns: RequestBuilder<GetItemsByFilter200Response> 
     */
    open class func getHotItemsWithRequestBuilder(type: [String]? = nil, perpage: Int64? = nil, page: Int64? = nil) -> RequestBuilder<GetItemsByFilter200Response> {
        let localVariablePath = "/items/hot"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "perpage": (wrappedValue: perpage?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetItemsByFilter200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) Item id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getItem(id: Int64, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetItem200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getItemWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /items/{id}
     - Returns item by id
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter id: (path) Item id 
     - returns: RequestBuilder<GetItem200Response> 
     */
    open class func getItemWithRequestBuilder(id: Int64) -> RequestBuilder<GetItem200Response> {
        var localVariablePath = "/items/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetItem200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (query) Item id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getItemComments(id: Int64? = nil, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetItemComments200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getItemCommentsWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /items/comments
     - Item comments
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter id: (query) Item id (optional)
     - returns: RequestBuilder<GetItemComments200Response> 
     */
    open class func getItemCommentsWithRequestBuilder(id: Int64? = nil) -> RequestBuilder<GetItemComments200Response> {
        let localVariablePath = "/items/comments"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetItemComments200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (query) Item id (optional)
     - parameter sid: (query) Trailer id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getItemTrailer(id: Int64? = nil, sid: String? = nil, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetItemTrailer200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getItemTrailerWithRequestBuilder(id: id, sid: sid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /items/trailer
     - Item trailer
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter id: (query) Item id (optional)
     - parameter sid: (query) Trailer id (optional)
     - returns: RequestBuilder<GetItemTrailer200Response> 
     */
    open class func getItemTrailerWithRequestBuilder(id: Int64? = nil, sid: String? = nil) -> RequestBuilder<GetItemTrailer200Response> {
        let localVariablePath = "/items/trailer"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id?.encodeToJSON(), isExplode: true),
            "sid": (wrappedValue: sid?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetItemTrailer200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter finished
     */
    public enum Finished_getItemsByFilter: Int64, CaseIterable {
        case _0 = 0
        case _1 = 1
    }

    /**
     * enum for parameter force
     */
    public enum Force_getItemsByFilter: String, CaseIterable {
        case quality = "quality"
        case advert = "advert"
        case erotic = "erotic"
    }

    /**

     - parameter type: (query) Video content types (optional)
     - parameter title: (query) Search by title (optional)
     - parameter genre: (query) Genres (optional)
     - parameter country: (query) Countries (optional)
     - parameter year: (query) Year or year interval (delimeted by -) (optional)
     - parameter finished: (query) Finished status, 0 or 1 (optional)
     - parameter actor: (query) Actors. Actor1,Actor2+Actor3 (optional)
     - parameter letter: (query) First letter of title (optional)
     - parameter conditions: (query) Simple conditions for filter (optional)
     - parameter force: (query) Skip quality filters (optional)
     - parameter sort: (query) Sort by field. Char &#39;-&#39; at the end is DESC (optional)
     - parameter quality: (query) Quality (optional)
     - parameter perpage: (query) Results on one page (optional)
     - parameter page: (query) Page number (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getItemsByFilter(type: [String]? = nil, title: String? = nil, genre: [Int64]? = nil, country: [Int64]? = nil, year: String? = nil, finished: Finished_getItemsByFilter? = nil, actor: [String]? = nil, letter: String? = nil, conditions: GetItemsByFilterConditionsParameter? = nil, force: Force_getItemsByFilter? = nil, sort: GetItemsByFilterSortParameter? = nil, quality: [Int64]? = nil, perpage: Int64? = nil, page: Int64? = nil, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetItemsByFilter200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getItemsByFilterWithRequestBuilder(type: type, title: title, genre: genre, country: country, year: year, finished: finished, actor: actor, letter: letter, conditions: conditions, force: force, sort: sort, quality: quality, perpage: perpage, page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /items
     - Returns items by filter
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter type: (query) Video content types (optional)
     - parameter title: (query) Search by title (optional)
     - parameter genre: (query) Genres (optional)
     - parameter country: (query) Countries (optional)
     - parameter year: (query) Year or year interval (delimeted by -) (optional)
     - parameter finished: (query) Finished status, 0 or 1 (optional)
     - parameter actor: (query) Actors. Actor1,Actor2+Actor3 (optional)
     - parameter letter: (query) First letter of title (optional)
     - parameter conditions: (query) Simple conditions for filter (optional)
     - parameter force: (query) Skip quality filters (optional)
     - parameter sort: (query) Sort by field. Char &#39;-&#39; at the end is DESC (optional)
     - parameter quality: (query) Quality (optional)
     - parameter perpage: (query) Results on one page (optional)
     - parameter page: (query) Page number (optional)
     - returns: RequestBuilder<GetItemsByFilter200Response> 
     */
    open class func getItemsByFilterWithRequestBuilder(type: [String]? = nil, title: String? = nil, genre: [Int64]? = nil, country: [Int64]? = nil, year: String? = nil, finished: Finished_getItemsByFilter? = nil, actor: [String]? = nil, letter: String? = nil, conditions: GetItemsByFilterConditionsParameter? = nil, force: Force_getItemsByFilter? = nil, sort: GetItemsByFilterSortParameter? = nil, quality: [Int64]? = nil, perpage: Int64? = nil, page: Int64? = nil) -> RequestBuilder<GetItemsByFilter200Response> {
        let localVariablePath = "/items"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: false),
            "title": (wrappedValue: title?.encodeToJSON(), isExplode: true),
            "genre": (wrappedValue: genre?.encodeToJSON(), isExplode: false),
            "country": (wrappedValue: country?.encodeToJSON(), isExplode: false),
            "year": (wrappedValue: year?.encodeToJSON(), isExplode: true),
            "finished": (wrappedValue: finished?.encodeToJSON(), isExplode: true),
            "actor": (wrappedValue: actor?.encodeToJSON(), isExplode: false),
            "letter": (wrappedValue: letter?.encodeToJSON(), isExplode: true),
            "conditions": (wrappedValue: conditions?.encodeToJSON(), isExplode: false),
            "force": (wrappedValue: force?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "quality": (wrappedValue: quality?.encodeToJSON(), isExplode: false),
            "perpage": (wrappedValue: perpage?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetItemsByFilter200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter mid: (query) Media id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMediaLinks(mid: Int64? = nil, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetMediaLinks200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getMediaLinksWithRequestBuilder(mid: mid).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /items/media-links
     - Returns files and subtitles
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter mid: (query) Media id (optional)
     - returns: RequestBuilder<GetMediaLinks200Response> 
     */
    open class func getMediaLinksWithRequestBuilder(mid: Int64? = nil) -> RequestBuilder<GetMediaLinks200Response> {
        let localVariablePath = "/items/media-links"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "mid": (wrappedValue: mid?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetMediaLinks200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter type
     */
    public enum ModelType_getMediaVideoLink: String, CaseIterable {
        case http = "http"
        case hls = "hls"
        case hls2 = "hls2"
        case hls4 = "hls4"
    }

    /**

     - parameter file: (query) File path (optional)
     - parameter type: (query) Streaming type (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMediaVideoLink(file: String? = nil, type: ModelType_getMediaVideoLink? = nil, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetMediaVideoLink200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getMediaVideoLinkWithRequestBuilder(file: file, type: type).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /items/media-video-link
     - Returns url by file path and streaming type
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter file: (query) File path (optional)
     - parameter type: (query) Streaming type (optional)
     - returns: RequestBuilder<GetMediaVideoLink200Response> 
     */
    open class func getMediaVideoLinkWithRequestBuilder(file: String? = nil, type: ModelType_getMediaVideoLink? = nil) -> RequestBuilder<GetMediaVideoLink200Response> {
        let localVariablePath = "/items/media-video-link"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "file": (wrappedValue: file?.encodeToJSON(), isExplode: true),
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetMediaVideoLink200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter type: (query) Video content types (optional)
     - parameter perpage: (query) Results on one page (optional)
     - parameter page: (query) Page number (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPopularItems(type: [String]? = nil, perpage: Int64? = nil, page: Int64? = nil, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetItemsByFilter200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getPopularItemsWithRequestBuilder(type: type, perpage: perpage, page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /items/popular
     - Popular items shortcut
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter type: (query) Video content types (optional)
     - parameter perpage: (query) Results on one page (optional)
     - parameter page: (query) Page number (optional)
     - returns: RequestBuilder<GetItemsByFilter200Response> 
     */
    open class func getPopularItemsWithRequestBuilder(type: [String]? = nil, perpage: Int64? = nil, page: Int64? = nil) -> RequestBuilder<GetItemsByFilter200Response> {
        let localVariablePath = "/items/popular"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "perpage": (wrappedValue: perpage?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetItemsByFilter200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getServerLocations(apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetServerLocations200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getServerLocationsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /references/server-location
     - Returns server locations
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - returns: RequestBuilder<GetServerLocations200Response> 
     */
    open class func getServerLocationsWithRequestBuilder() -> RequestBuilder<GetServerLocations200Response> {
        let localVariablePath = "/references/server-location"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetServerLocations200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (query) Item id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getSimilarItems(id: Int64? = nil, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetItemsByFilter200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getSimilarItemsWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /items/similar
     - Returns items by filter
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter id: (query) Item id (optional)
     - returns: RequestBuilder<GetItemsByFilter200Response> 
     */
    open class func getSimilarItemsWithRequestBuilder(id: Int64? = nil) -> RequestBuilder<GetItemsByFilter200Response> {
        let localVariablePath = "/items/similar"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetItemsByFilter200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getStreamingTypes(apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetStreamingTypes200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getStreamingTypesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /references/streaming-type
     - Returns streaming types
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - returns: RequestBuilder<GetStreamingTypes200Response> 
     */
    open class func getStreamingTypesWithRequestBuilder() -> RequestBuilder<GetStreamingTypes200Response> {
        let localVariablePath = "/references/streaming-type"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetStreamingTypes200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTvChannels(apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetTvChannels200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getTvChannelsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /tv
     - TV channels list
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - returns: RequestBuilder<GetTvChannels200Response> 
     */
    open class func getTvChannelsWithRequestBuilder() -> RequestBuilder<GetTvChannels200Response> {
        let localVariablePath = "/tv"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetTvChannels200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getVideoQualities(apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetVoiceoverAuthors200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getVideoQualitiesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /references/video-quality
     - Returns available video qualities
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - returns: RequestBuilder<GetVoiceoverAuthors200Response> 
     */
    open class func getVideoQualitiesWithRequestBuilder() -> RequestBuilder<GetVoiceoverAuthors200Response> {
        let localVariablePath = "/references/video-quality"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetVoiceoverAuthors200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getVoiceoverAuthors(apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetVoiceoverAuthors200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getVoiceoverAuthorsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /references/voiceover-author
     - Returns voiceover authors
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - returns: RequestBuilder<GetVoiceoverAuthors200Response> 
     */
    open class func getVoiceoverAuthorsWithRequestBuilder() -> RequestBuilder<GetVoiceoverAuthors200Response> {
        let localVariablePath = "/references/voiceover-author"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetVoiceoverAuthors200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getVoiceoverTypes(apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetVoiceoverTypes200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getVoiceoverTypesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /references/voiceover-type
     - Returns voiceover types
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - returns: RequestBuilder<GetVoiceoverTypes200Response> 
     */
    open class func getVoiceoverTypesWithRequestBuilder() -> RequestBuilder<GetVoiceoverTypes200Response> {
        let localVariablePath = "/references/voiceover-type"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetVoiceoverTypes200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getWatchingMovies(apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetWatchingMovies200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getWatchingMoviesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /watching/movies
     - Get watching movies
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - returns: RequestBuilder<GetWatchingMovies200Response> 
     */
    open class func getWatchingMoviesWithRequestBuilder() -> RequestBuilder<GetWatchingMovies200Response> {
        let localVariablePath = "/watching/movies"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetWatchingMovies200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter subscribed
     */
    public enum Subscribed_getWatchingSeries: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
    }

    /**

     - parameter subscribed: (query) Show only subscribed series if 1 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getWatchingSeries(subscribed: Subscribed_getWatchingSeries, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetWatchingSeries200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getWatchingSeriesWithRequestBuilder(subscribed: subscribed).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /watching/serials
     - Get watching series
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter subscribed: (query) Show only subscribed series if 1 
     - returns: RequestBuilder<GetWatchingSeries200Response> 
     */
    open class func getWatchingSeriesWithRequestBuilder(subscribed: Subscribed_getWatchingSeries) -> RequestBuilder<GetWatchingSeries200Response> {
        let localVariablePath = "/watching/serials"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "subscribed": (wrappedValue: subscribed.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetWatchingSeries200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (query) Item id 
     - parameter video: (query) Video number (optional)
     - parameter season: (query) Season number (only for series) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getWatchingStatus(id: Int64, video: Int64? = nil, season: Int64? = nil, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: GetWatchingStatus200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getWatchingStatusWithRequestBuilder(id: id, video: video, season: season).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /watching
     - Get watching status of item
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter id: (query) Item id 
     - parameter video: (query) Video number (optional)
     - parameter season: (query) Season number (only for series) (optional)
     - returns: RequestBuilder<GetWatchingStatus200Response> 
     */
    open class func getWatchingStatusWithRequestBuilder(id: Int64, video: Int64? = nil, season: Int64? = nil) -> RequestBuilder<GetWatchingStatus200Response> {
        let localVariablePath = "/watching"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(), isExplode: true),
            "video": (wrappedValue: video?.encodeToJSON(), isExplode: true),
            "season": (wrappedValue: season?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetWatchingStatus200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter notifyDeviceRequest: (body) Device info 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func notifyDevice(notifyDeviceRequest: NotifyDeviceRequest, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: UnlinkCurrentDevice200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return notifyDeviceWithRequestBuilder(notifyDeviceRequest: notifyDeviceRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /device/notify
     - Notify device info
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter notifyDeviceRequest: (body) Device info 
     - returns: RequestBuilder<UnlinkCurrentDevice200Response> 
     */
    open class func notifyDeviceWithRequestBuilder(notifyDeviceRequest: NotifyDeviceRequest) -> RequestBuilder<UnlinkCurrentDevice200Response> {
        let localVariablePath = "/device/notify"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: notifyDeviceRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnlinkCurrentDevice200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter removeBookmarkFolderRequest: (body) Object with folder id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func removeBookmarkFolder(removeBookmarkFolderRequest: RemoveBookmarkFolderRequest, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: UnlinkCurrentDevice200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return removeBookmarkFolderWithRequestBuilder(removeBookmarkFolderRequest: removeBookmarkFolderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /bookmarks/remove-folder
     - Remove bookmark folder
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter removeBookmarkFolderRequest: (body) Object with folder id 
     - returns: RequestBuilder<UnlinkCurrentDevice200Response> 
     */
    open class func removeBookmarkFolderWithRequestBuilder(removeBookmarkFolderRequest: RemoveBookmarkFolderRequest) -> RequestBuilder<UnlinkCurrentDevice200Response> {
        let localVariablePath = "/bookmarks/remove-folder"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: removeBookmarkFolderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnlinkCurrentDevice200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) id of device 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func removeDeviceById(id: Int64, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: RemoveDeviceById200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return removeDeviceByIdWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /device/{id}/remove
     - Remove device by id
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter id: (path) id of device 
     - returns: RequestBuilder<RemoveDeviceById200Response> 
     */
    open class func removeDeviceByIdWithRequestBuilder(id: Int64) -> RequestBuilder<RemoveDeviceById200Response> {
        var localVariablePath = "/device/{id}/remove"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RemoveDeviceById200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter addItemToBookmarkFolderRequest: (body) Object with item id and folder id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func removeItemFromBookmarkFolder(addItemToBookmarkFolderRequest: AddItemToBookmarkFolderRequest, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: UnlinkCurrentDevice200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return removeItemFromBookmarkFolderWithRequestBuilder(addItemToBookmarkFolderRequest: addItemToBookmarkFolderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /bookmarks/remove-item
     - Remove item from bookmark folder
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter addItemToBookmarkFolderRequest: (body) Object with item id and folder id 
     - returns: RequestBuilder<UnlinkCurrentDevice200Response> 
     */
    open class func removeItemFromBookmarkFolderWithRequestBuilder(addItemToBookmarkFolderRequest: AddItemToBookmarkFolderRequest) -> RequestBuilder<UnlinkCurrentDevice200Response> {
        let localVariablePath = "/bookmarks/remove-item"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addItemToBookmarkFolderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnlinkCurrentDevice200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter field
     */
    public enum Field_searchItems: String, CaseIterable {
        case title = "title"
        case director = "director"
        case cast = "cast"
    }

    /**
     * enum for parameter sectioned
     */
    public enum Sectioned_searchItems: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
    }

    /**

     - parameter q: (query) Search query (optional)
     - parameter type: (query) Video content types (optional)
     - parameter field: (query) Search in field (optional)
     - parameter perpage: (query) Results on one page (optional)
     - parameter page: (query) Page number (optional)
     - parameter sectioned: (query) Sectioned 1 or 0. Defines output type, if 1 - (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func searchItems(q: String? = nil, type: [String]? = nil, field: Field_searchItems? = nil, perpage: Int64? = nil, page: Int64? = nil, sectioned: Sectioned_searchItems? = nil, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: SearchItems200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return searchItemsWithRequestBuilder(q: q, type: type, field: field, perpage: perpage, page: page, sectioned: sectioned).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /items/search
     - Search items
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter q: (query) Search query (optional)
     - parameter type: (query) Video content types (optional)
     - parameter field: (query) Search in field (optional)
     - parameter perpage: (query) Results on one page (optional)
     - parameter page: (query) Page number (optional)
     - parameter sectioned: (query) Sectioned 1 or 0. Defines output type, if 1 - (optional)
     - returns: RequestBuilder<SearchItems200Response> 
     */
    open class func searchItemsWithRequestBuilder(q: String? = nil, type: [String]? = nil, field: Field_searchItems? = nil, perpage: Int64? = nil, page: Int64? = nil, sectioned: Sectioned_searchItems? = nil) -> RequestBuilder<SearchItems200Response> {
        let localVariablePath = "/items/search"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": (wrappedValue: q?.encodeToJSON(), isExplode: true),
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: false),
            "field": (wrappedValue: field?.encodeToJSON(), isExplode: true),
            "perpage": (wrappedValue: perpage?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "sectioned": (wrappedValue: sectioned?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchItems200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter addItemToBookmarkFolderRequest: (body) Object with item id and folder id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func toggleItemInBookmarkFolder(addItemToBookmarkFolderRequest: AddItemToBookmarkFolderRequest, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: UnlinkCurrentDevice200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return toggleItemInBookmarkFolderWithRequestBuilder(addItemToBookmarkFolderRequest: addItemToBookmarkFolderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /bookmarks/toggle-item
     - Toggle item in bookmark folder. Add or remove based on state
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter addItemToBookmarkFolderRequest: (body) Object with item id and folder id 
     - returns: RequestBuilder<UnlinkCurrentDevice200Response> 
     */
    open class func toggleItemInBookmarkFolderWithRequestBuilder(addItemToBookmarkFolderRequest: AddItemToBookmarkFolderRequest) -> RequestBuilder<UnlinkCurrentDevice200Response> {
        let localVariablePath = "/bookmarks/toggle-item"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addItemToBookmarkFolderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnlinkCurrentDevice200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (query) Series item id 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func toggleWatchList(id: Int64, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: ToggleWatchList200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return toggleWatchListWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /watching/togglewatchlist
     - Toggle watchlist (for series)
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter id: (query) Series item id 
     - returns: RequestBuilder<ToggleWatchList200Response> 
     */
    open class func toggleWatchListWithRequestBuilder(id: Int64) -> RequestBuilder<ToggleWatchList200Response> {
        let localVariablePath = "/watching/togglewatchlist"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ToggleWatchList200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (query) Item id 
     - parameter video: (query) Video id 
     - parameter season: (query) Seson number (only for series) 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func toggleWatchedStatus(id: Int64, video: Int64, season: Int, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: ToggleWatchedStatus200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return toggleWatchedStatusWithRequestBuilder(id: id, video: video, season: season).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /watching/toggle
     - Toggle watched status
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter id: (query) Item id 
     - parameter video: (query) Video id 
     - parameter season: (query) Seson number (only for series) 
     - returns: RequestBuilder<ToggleWatchedStatus200Response> 
     */
    open class func toggleWatchedStatusWithRequestBuilder(id: Int64, video: Int64, season: Int) -> RequestBuilder<ToggleWatchedStatus200Response> {
        let localVariablePath = "/watching/toggle"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id.encodeToJSON(), isExplode: true),
            "video": (wrappedValue: video.encodeToJSON(), isExplode: true),
            "season": (wrappedValue: season.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ToggleWatchedStatus200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func unlinkCurrentDevice(apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: UnlinkCurrentDevice200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return unlinkCurrentDeviceWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /device/unlink
     - Unlink current device
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - returns: RequestBuilder<UnlinkCurrentDevice200Response> 
     */
    open class func unlinkCurrentDeviceWithRequestBuilder() -> RequestBuilder<UnlinkCurrentDevice200Response> {
        let localVariablePath = "/device/unlink"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnlinkCurrentDevice200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path) id of device 
     - parameter requestBody: (body) Map with setting key and value 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateDeviceSettings(id: Int64, requestBody: [String: UpdateDeviceSettingsRequestValue], apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: UnlinkCurrentDevice200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return updateDeviceSettingsWithRequestBuilder(id: id, requestBody: requestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /device/{id}/settings
     - Update device settings
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter id: (path) id of device 
     - parameter requestBody: (body) Map with setting key and value 
     - returns: RequestBuilder<UnlinkCurrentDevice200Response> 
     */
    open class func updateDeviceSettingsWithRequestBuilder(id: Int64, requestBody: [String: UpdateDeviceSettingsRequestValue]) -> RequestBuilder<UnlinkCurrentDevice200Response> {
        var localVariablePath = "/device/{id}/settings"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UnlinkCurrentDevice200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter like
     */
    public enum Like_voteForItem: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
    }

    /**

     - parameter id: (query) Item id (optional)
     - parameter like: (query) Like or not (1/0) (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func voteForItem(id: Int64? = nil, like: Like_voteForItem? = nil, apiResponseQueue: DispatchQueue = KinopubApiAPI.apiResponseQueue, completion: @escaping ((_ data: VoteForItem200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return voteForItemWithRequestBuilder(id: id, like: like).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /items/vote
     - Vote for item
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - parameter id: (query) Item id (optional)
     - parameter like: (query) Like or not (1/0) (optional)
     - returns: RequestBuilder<VoteForItem200Response> 
     */
    open class func voteForItemWithRequestBuilder(id: Int64? = nil, like: Like_voteForItem? = nil) -> RequestBuilder<VoteForItem200Response> {
        let localVariablePath = "/items/vote"
        let localVariableURLString = KinopubApiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id?.encodeToJSON(), isExplode: true),
            "like": (wrappedValue: like?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VoteForItem200Response>.Type = KinopubApiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
