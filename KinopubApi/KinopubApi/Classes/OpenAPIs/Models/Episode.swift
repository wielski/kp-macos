//
// Episode.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Episode: Codable, JSONEncodable, Hashable {

    public var id: Int64?
    public var title: String?
    public var thumbnail: String?
    public var tracks: Int?
    public var ac3: Int?
    public var number: Int?
    public var snumber: Int?
    public var duration: Int64?
    public var watched: Int?
    public var watching: WatchingStatus?
    public var subtitles: [Subtitle]?

    public init(id: Int64? = nil, title: String? = nil, thumbnail: String? = nil, tracks: Int? = nil, ac3: Int? = nil, number: Int? = nil, snumber: Int? = nil, duration: Int64? = nil, watched: Int? = nil, watching: WatchingStatus? = nil, subtitles: [Subtitle]? = nil) {
        self.id = id
        self.title = title
        self.thumbnail = thumbnail
        self.tracks = tracks
        self.ac3 = ac3
        self.number = number
        self.snumber = snumber
        self.duration = duration
        self.watched = watched
        self.watching = watching
        self.subtitles = subtitles
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case title
        case thumbnail
        case tracks
        case ac3
        case number
        case snumber
        case duration
        case watched
        case watching
        case subtitles
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(thumbnail, forKey: .thumbnail)
        try container.encodeIfPresent(tracks, forKey: .tracks)
        try container.encodeIfPresent(ac3, forKey: .ac3)
        try container.encodeIfPresent(number, forKey: .number)
        try container.encodeIfPresent(snumber, forKey: .snumber)
        try container.encodeIfPresent(duration, forKey: .duration)
        try container.encodeIfPresent(watched, forKey: .watched)
        try container.encodeIfPresent(watching, forKey: .watching)
        try container.encodeIfPresent(subtitles, forKey: .subtitles)
    }
}

