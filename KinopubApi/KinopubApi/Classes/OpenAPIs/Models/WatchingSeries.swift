//
// WatchingSeries.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct WatchingSeries: Codable, JSONEncodable, Hashable {

    public var id: Int64?
    public var type: SerialType?
    public var subtype: String?
    public var title: String?
    public var posters: Posters?
    public var total: Int64?
    public var watched: Int64?
    public var new: Int64?

    public init(id: Int64? = nil, type: SerialType? = nil, subtype: String? = nil, title: String? = nil, posters: Posters? = nil, total: Int64? = nil, watched: Int64? = nil, new: Int64? = nil) {
        self.id = id
        self.type = type
        self.subtype = subtype
        self.title = title
        self.posters = posters
        self.total = total
        self.watched = watched
        self.new = new
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case type
        case subtype
        case title
        case posters
        case total
        case watched
        case new
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(subtype, forKey: .subtype)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(posters, forKey: .posters)
        try container.encodeIfPresent(total, forKey: .total)
        try container.encodeIfPresent(watched, forKey: .watched)
        try container.encodeIfPresent(new, forKey: .new)
    }
}

